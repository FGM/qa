<?php

/**
 * @file
 * OSInet Quality Assurance module for Drupal.
 *
 * @copyright Copyright (C) 2005-2018 Frederic G. MARAND for Ouest SystÃ¨mes Informatiques (OSInet)
 *
 * @since DRUPAL-4-6
 *
 * @license Licensed under the disjunction of the CeCILL, version 2 and General Public License version 2 and later
 *
 * License note: QA is distributed by OSInet to its customers under the
 * CeCILL 2.0 license. OSInet support services only apply to the module
 * when distributed by OSInet, not by any third-party further down the
 * distribution chain.
 *
 * If you obtained QA from drupal.org, that site received it under the
 * GPLv2 license and can therefore distribute it under the GPLv2, and
 * so can you and just anyone down the chain as long as the GPLv2 terms
 * are abided by, the module distributor in that case being the
 * drupal.org organization or the downstream distributor, not OSInet.
 */

use Drupal\qa\Exportable;
use Drupal\qa\Plugin\Qa\Control\BaseControl;
use Drupal\qa\Plugin\Qa\Control\BasePackage;
use Drupal\qa\Plugin\Qa\Control\Variable\Variable;

/**
 * Helper to access the module files.
 *
 * @param string $extra
 *   Optional. A module sub-component.
 *
 * @return string
 *   The on-disk path.
 */
function _qa_get_path(string $extra = '') {
  $qa = drupal_get_path('module', 'qa');
  return implode('/', [$qa, $extra]);
}

/**
 * Implements hook_boot().
 *
 * Menu loaders may need objects before hook_init().
 *
 * - register custom autoloader.
 */
function qa_boot() {
  spl_autoload_register(qa_autoload_psr4::class);
}

/**
 * Legacy (pre-PSR/4) Dedicated autoloader for QA.
 *
 * Only load symbols in the Drupal\qa namespace.
 *
 * @param string $name
 *   The symbol to load.
 *
 * @deprecated
 */
function qa_autoload($name) {
  // Adjust verbosity if needed.
  $verbose = FALSE;

  $verbose && watchdog('qa/autoload', 'Loading %name', array('%name' => $name), WATCHDOG_DEBUG);
  if (strpos($name, 'Drupal\qa\\') !== 0) {
    return;
  }

  $path_array = explode('\\', $name);
  $filename = array_pop($path_array);
  array_splice($path_array, 0, 2, [_qa_get_path(), 'src/Plugin/Qa/Control']);
  $path = implode('/', $path_array);
  if (!is_dir($path) || !is_readable($path)) {
    $args = array('%path' => $path);
    drupal_set_message(t("Cannot read plugins directory %path.", $args), 'warning');
    watchdog('qa', "Cannot read plugins directory %path", $args, WATCHDOG_WARNING);
  }
  $path_array[] = "{$filename}.php";
  $path = implode('/', $path_array);
  $sts = include_once $path;
  $verbose && drupal_set_message(t('QA Autoloaded %path: @result', array(
    '%path' => $path,
    '@result' => $sts ? t('Success') : t('Failure'),
  )));
}

/**
 * Dedicated PSR/4 autoloader for this module.
 *
 * @param string $class
 *   The name of the class to load.
 *
 * @see \qa_boot()
 */
function qa_autoload_psr4($class) {
  // Project-specific namespace prefix.
  $prefix = 'Drupal\\qa\\';

  // Does the class use the QA namespace prefix ?
  $len = strlen($prefix);
  if (strncmp($prefix, $class, $len) !== 0) {
    // No: move to the next registered autoloader.
    return;
  }

  // Get the relative class name.
  $relative_class = substr($class, $len);

  // Replace the namespace prefix with the base directory, replace namespace
  // separators with directory separators in the relative class name, append
  // with ".php".
  $file = __DIR__ . '/src/' . str_replace('\\', '/', $relative_class) . '.php';

  // If the file exists, require it.
  if (file_exists($file)) {
    require $file;
  }
}

/**
 * Implements hook_menu().
 */
function qa_menu() {
  $items = array();
  $items['admin/reports/qa'] = array(
    'title'            => 'Quality Assurance',
    'description'      => 'Assisted auditing tools by OSInet',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('qa_report_form'),
    'access arguments' => array('access site reports'),
  );
  $items['admin/reports/qa/projects'] = array(
    'title'           => 'Projects',
    'type'             => MENU_LOCAL_TASK,
    'page callback'    => 'qa_report_projects',
    'access arguments' => array('access site reports'),
    'file'             => 'qa_projects.inc',
  );
  $items['admin/reports/qa/variable'] = array(
    'title'           => 'Variables',
    'type'             => MENU_LOCAL_TASK,
    'page callback'    => 'qa_report_variables',
    'access arguments' => array('access site reports'),
    'file'             => 'qa_variables.inc',
  );
  $items['admin/reports/qa/variable/%qa_variable'] = array(
    'title'           => 'Variables',
    'type'             => MENU_CALLBACK,
    'page callback'    => 'qa_report_variable',
    'page arguments'   => array(4),
    'access arguments' => array('access site reports'),
    'file'             => 'qa_variables.inc',
  );

  $items['admin/reports/qa/results'] = array(
    'title'            => 'Quality Assurance results',
    'page callback'    => 'qa_report_results',
    'page arguments'   => array(),
    'access arguments' => array('access site reports'),
    'type'             => MENU_CALLBACK,
  );
  $items['admin/reports/qa/list'] = array(
    'title'            => 'QA Tests',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/reports/qa/dependencies'] = array(
    'title'            => 'Dependencies',
    'type'             => MENU_LOCAL_TASK,
    'page callback'    => 'qa_page_dependencies',
    'access arguments' => array('access site reports'),
    'file'             => 'qa_dependencies.inc',
    'weight'           => 1,
  );
  return $items;
}

/**
 * Page callback for qa/dependencies.
 *
 * TODO convert to Image_GraphViz to remove dependency on graphviz_filter.
 * XXX convert to Grafizzi to remove dependency on Image_GraphViz.
 *
 * @return string
 *   The dependencies graph, in DOT format.
 */
function qa_page_dependencies() {
  $graph = qa_dependencies();
  // Passed by reference: cannot pass a function return.
  return graphviz_filter_render($graph);
}

/**
 * Batch conclusion callback.
 *
 * @param bool $success
 *   Did the batch succeed ?
 * @param array $results
 *   The accumulated batch results.
 * @param array $operations
 *   The batch operations.
 */
function qa_report_finished(bool $success, array $results, array $operations) {
  unset($results['#message']);
  if ($success) {
    $message = format_plural(count($results), 'One control pass ran.', '@count control passes ran.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
  $_SESSION['qa_results'] = $results;
  drupal_goto('admin/reports/qa/results');
}

/**
 * Results page for QA Controls batch.
 *
 * @link http://www.php.net/manual/fr/function.unserialize.php @endlink
 */
function qa_report_results() {
  if (empty($_SESSION['qa_results'])) {
    drupal_goto('admin/reports/qa');
  }
  // Work around incomplete classes.
  $results = unserialize(serialize($_SESSION['qa_results']));

  $header = [
    t('Control'),
    t('Status'),
    t('Results'),
  ];
  $data = [];
  foreach ($results as $pass) {
    $control = $pass->control;
    $data[] = [
      $control->title,
      $pass->status
      ? theme('image', [
        'path' => 'misc/watchdog-ok.png',
        'alt' => t('OK'),
      ])
      : theme('image', [
        'path' => 'misc/watchdog-error.png',
        'alt' => t('Error'),
      ]),
      $pass->result,
    ];
  }

  $ret = [
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $data,
    '#attributes' => [
      'id' => 'qa-results',
    ],
    '#attached' => [
      'css' => [
        _qa_get_path('qa.css'),
      ],
    ],
  ];

  // Do unset($_SESSION['qa_results']) to allow refreshing the results page.
  return $ret;
}

/**
 * Form builder for QA packages/controls selection form.
 *
 * @return array
 *   The form array.
 */
function qa_report_form(array $form, array $form_state) {
  $form = array();
  $packages = Exportable::getClasses(_qa_get_path(), BasePackage::class);
  ksort($packages);
  foreach ($packages as $package_name => $package) {
    $collapsed = TRUE;
    $form[$package_name] = array(
      '#type' => 'fieldset',
      '#title' => filter_xss_admin($package->title),
      '#description' => filter_xss_admin($package->description),
      '#collapsible' => TRUE,
    );
    $controls = $package->getClasses($package->dir, BaseControl::class);

    foreach ($controls as $control_name => $control) {
      $default_value = isset($_SESSION[$control_name])
        ? $_SESSION[$control_name]
        : NULL;
      if ($default_value) {
        $collapsed = FALSE;
      }

      $deps = array();
      $met = TRUE;
      foreach ($control->getDependencies() as $dep_name) {
        if (module_exists($dep_name)) {
          $deps[] = t('@module (<span class="admin-enabled">available</span>)', ['@module' => $dep_name]);
        }
        else {
          $deps[] = t('@module (<span class="admin-disabled">unavailable</span>)', ['@module' => $dep_name]);
          $met = FALSE;
        }
      }
      $form[$package_name][$control_name] = [
        '#type'          => 'checkbox',
        '#default_value' => $met ? $default_value : 0,
        '#title'         => filter_xss_admin($control->title),
        '#description'   => filter_xss_admin($control->description),
        '#disabled'      => !$met,
      ];
      $form[$package_name][$control_name . '-dependencies'] = [
        '#value' => t('Depends on: !dependencies', [
          '!dependencies' => implode(', ', $deps),
        ]),
        '#prefix' => '<div class="admin-dependencies">',
        '#suffix' => '</div>',
      ];
    }
    $form[$package_name]['#collapsed'] = $collapsed;
  }

  $form['submit'] = [
    '#type'  => 'submit',
    '#value' => t('Run controls'),
  ];

  return $form;
}

/**
 * Submit handler for QA packages/controls selection form.
 *
 * @param array $form
 *   The submitted form.
 * @param array $form_state
 *   Its data.
 */
function qa_report_form_submit(array $form, array &$form_state) {
  $controls = [];
  foreach ($form_state['values'] as $item => $value) {
    if (class_exists($item) && is_subclass_of($item, BaseControl::class)) {
      if ($value) {
        $controls[$item] = $value;
      }
      $_SESSION[$item] = $value;
    }
    elseif ($value == 1) {
      $args = array(
        '%control' => $item,
      );
      drupal_set_message(t('Requested invalid control %control', $args), 'error');
      watchdog('qa', 'Requested invalid control %control', $args, WATCHDOG_ERROR);
    }
  }

  drupal_set_message(t('Prepare to run these controls: @controls', [
    '@controls' => implode(', ', array_keys($controls)),
  ]), 'status');
  $batch = array(
    'operations'       => array(),
    'title'            => t('QA Controls running'),
    'init_message'     => t('QA Controls initializing'),
    // 'progress_message' =>
    // t('current: @current, Remaining: @remaining, Total: @total'),
    'error_message'    => t('Error in QA Control'),
    'finished'         => 'qa_report_finished',
    // 'file'             => '', // only if outside module file.
  );

  foreach ($controls as $item => $value) {
    $batch['operations'][] = array('qa_report_run_pass', array($item));
  }
  batch_set($batch);
}

/**
 * Batch progress step.
 */
function qa_report_run_pass($class_name, &$context) {
  $name_arg = array('@class' => $class_name);

  $control = new $class_name();
  if (!is_object($control)) {
    drupal_set_message(t('Cannot obtain an instance for @class', $name_arg), 'error');
    $context['results']['#message'] = t('Control @class failed to run.', $name_arg);
    $context['message'] = t('Control @class failed to run.', $name_arg);
    $context['results'][$class_name] = 'wow';
  }
  else {
    drupal_set_message(t('Running a control instance for @class', $name_arg), 'status');
    $pass = $control->run();
    if (!$pass->status) {
      $context['success'] = FALSE;
    }
    $context['results']['#message'][] = t('Control @class ran', $name_arg);
    $context['message'] = theme('item_list', $context['results']['#message']);
    $context['results'][$class_name] = $pass;
  }
}

/**
 * Use a Drupal variable as a Variable instance if it is set.
 *
 * @param string $name
 *   The name of the variable.
 *
 * @return bool|\Drupal\qa\Plugin\Qa\Control\Variable\Variable
 *   An associated Variable instance, or FALSE if it does not exist.
 */
function qa_variable_load($name) {
  $variable = new Variable($name);
  if (!$variable->is_set) {
    return FALSE;
  }

  return $variable;
}
