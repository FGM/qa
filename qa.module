<?php

/**
 * @file
 * OSInet Quality Assurance module for Drupal.
 *
 * @copyright Copyright (C) 2005-2018 Frederic G. MARAND for Ouest SystÃ¨mes
 *   Informatiques (OSInet)
 *
 * @since DRUPAL-4-6
 *
 * @license Licensed under the disjunction of the CeCILL, version 2 and General
 *   Public License version 2 and later
 *
 * License note: QA is distributed by OSInet to its customers under the
 * CeCILL 2.0 license. OSInet support services only apply to the module
 * when distributed by OSInet, not by any third-party further down the
 * distribution chain.
 *
 * If you obtained QA from drupal.org, that site received it under the
 * GPLv2 license and can therefore distribute it under the GPLv2, and
 * so can you and just anyone down the chain as long as the GPLv2 terms
 * are abided by, the module distributor in that case being the
 * drupal.org organization or the downstream distributor, not OSInet.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Url;
use Drupal\qa\Variable\Variable;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Page callback for qa/dependencies
 *
 * TODO convert to native Image_GraphViz to remove dependency on graphviz_filter
 * XXX convert to Grafizzi to remove dependency on Image_GraphViz
 *
 * @return string
 */
function qa_page_dependencies() {
  /** @var \Drupal\qa\Dependencies $qaDep */
  $qaDep = Drupal::service('qa.dependencies');
  $G = $qaDep->build();
  // passed by reference: cannot pass a function return
  return graphviz_filter_render($G);
}

/**
 * Batch conclusion callback.
 *
 * @param boolean $success
 * @param array $results
 * @param array $operations
 */
function qa_report_finished($success, $results, $operations) {
  unset($results['#message']);
  if ($success) {
    $message = Drupal::translation()
      ->formatPlural(count($results), 'One control pass ran.',
        '@count control passes ran.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
  $_SESSION['qa_results'] = $results;
  return new RedirectResponse(Url::fromRoute('qa.reports.results'));
}

/**
 * Results page for QA Controls batch.
 *
 * @link http://www.php.net/manual/fr/function.unserialize.php @endlink
 */
function qa_report_results() {
  if (empty($_SESSION['qa_results'])) {
    return new RedirectResponse(Url::fromRoute('qa.reports'));
  }
  // Work around incomplete classes
  $results = unserialize(serialize($_SESSION['qa_results']));

  $header = [
    t('Control'),
    t('Status'),
    t('Results'),
  ];
  $data = [];
  $r = Drupal::service('renderer');
  foreach ($results as $pass) {
    $control = $pass->control;
    $data[] = [
      $control->title,
      $pass->status
        ? $r->render([
        '#theme' => 'image',
        '#path' => 'misc/watchdog-ok.png',
        '#alt' => t('OK'),
      ])
        : $r->render([
        '#theme' => 'image',
        '#path' => 'misc/watchdog-error.png',
        '#alt' => t('Error'),
      ]),
      $pass->result,
    ];
  }
  $ret = $r->render([
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $data,
    '#attributes' => [
      'id' => 'qa-results',
    ],
    '#attached' => ['library' => ['qa/results']],
  ]);
  // unset($_SESSION['qa_results']);
  return $ret;
}

/**
 * Form builder for QA packages/controls selection form.
 *
 * @return array
 */
function qa_report_form($form, $form_state) {
  $form = [];
  $base = drupal_get_path('module', 'qa');
  $packages = Exportable::getClasses($base, 'Drupal\qa\BasePackage');
  ksort($packages);
  foreach ($packages as $package_name => $package) {
    $collapsed = TRUE;
    $form[$package_name] = [
      '#type' => 'fieldset',
      '#title' => Xss::filterAdmin($package->title),
      '#description' => Xss::filterAdmin($package->description),
      '#collapsible' => TRUE,
    ];
    $controls = $package->getClasses($package->dir,
      'Drupal\qa\Plugin\Qa\Control\BaseControl');

    foreach ($controls as $control_name => $control) {
      $default_value = isset($_SESSION[$control_name])
        ? $_SESSION[$control_name]
        : NULL;
      if ($default_value) {
        $collapsed = FALSE;
      }

      $deps = [];
      $met = TRUE;
      foreach ($control->getDependencies() as $dep_name) {
        if (Drupal::moduleHandler()->moduleExists($dep_name)) {
          $deps[] = t('@module (<span class="admin-enabled">available</span>)',
            ['@module' => $dep_name]);
        }
        else {
          $deps[] = t('@module (<span class="admin-disabled">unavailable</span>)',
            ['@module' => $dep_name]);
          $met = FALSE;
        }
      }
      $form[$package_name][$control_name] = [
        '#type' => 'checkbox',
        '#default_value' => $met ? $default_value : 0,
        '#title' => Xss::filterAdmin($control->title),
        '#description' => Xss::filterAdmin($control->description),
        '#disabled' => !$met,
      ];
      $form[$package_name][$control_name . '-dependencies'] = [
        '#value' => t('Depends on: !dependencies', [
          '!dependencies' => implode(', ', $deps),
        ]),
        '#prefix' => '<div class="admin-dependencies">',
        '#suffix' => '</div>',
      ];
    }
    $form[$package_name]['#collapsed'] = $collapsed;
  }

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Run controls'),
  ];

  return $form;
}

/**
 * Submit handler for QA packages/controls selection form
 *
 * @param array $form
 * @param array $form_state
 */
function qa_report_form_submit($form, &$form_state) {
  $controls = [];
  foreach ($form_state['values'] as $item => $value) {
    if (class_exists($item) && is_subclass_of($item,
        '\Drupal\qa\Plugin\Qa\Control\BaseControl')) {
      if ($value) {
        $controls[$item] = $value;
      }
      $_SESSION[$item] = $value;
    }
    elseif ($value == 1) {
      $args = [
        '%control' => $item,
      ];
      drupal_set_message(t('Requested invalid control %control', $args),
        'error');
      \Drupal::logger('qa')->error('Requested invalid control %control', $args);
    }
  }

  drupal_set_message(t('Prepare to run these controls: @controls', [
    '@controls' => implode(', ', array_keys($controls)),
  ]), 'status');
  $batch = [
    'operations' => [],
    'title' => t('QA Controls running'),
    'init_message' => t('QA Controls initializing'),
    // 'progress_message' => t('current: @current, Remaining: @remaining, Total: @total'),
    'error_message' => t('Error in QA Control'),
    'finished' => 'qa_report_finished',
    // 'file'             => '', // only if outside module file
  ];

  foreach ($controls as $item => $value) {
    $batch['operations'][] = ['qa_report_run_pass', [$item]];
  }
  batch_set($batch);
}

/**
 * Batch progress step.
 *
 * @return void
 */
function qa_report_run_pass($class_name, &$context) {
  $name_arg = ['@class' => $class_name];

  $control = new $class_name();
  if (!is_object($control)) {
    drupal_set_message(t('Cannot obtain an instance for @class', $name_arg),
      'error');
    $context['results']['#message'] = t('Control @class failed to run.',
      $name_arg);
    $context['message'] = t('Control @class failed to run.', $name_arg);
    $context['results'][$class_name] = 'wow';
  }
  else {
    drupal_set_message(t('Running a control instance for @class', $name_arg),
      'status');
    $pass = $control->run();
    if (!$pass->status) {
      $context['success'] = FALSE;
    }
    $context['results']['#message'][] = t('Control @class ran', $name_arg);
    $context['message'] = \Drupal::service('renderer')->render([
      '#theme' => 'item_list',
      '#items' => $context['results']['#message'],
    ]);
    $context['results'][$class_name] = $pass;
  }
}

function qa_variable_load($name) {
  $variable = new Variable($name);
  if (!$variable->is_set) {
    return FALSE;
  }

  return $variable;
}
